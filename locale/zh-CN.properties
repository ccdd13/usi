# package.json
loadOptions_title = 选项
loadOptions_label = 配置
enableExternalScriptLoadQuestion_title = 导入外部脚本
enableExternalScriptLoadQuestion_description = 你想要知道USI导入脚本发生了什么问题吗？（当安装链接结尾为“user.js”的用户脚本源时）

#parse_userscript.js
required_script_one_include = 您必须至少设置一个include表达式 -> \n\n @include *website.com*
required_script_name = 您应该为脚本设置一个name，它不用是唯一的。 -> \n\n @name my_userscript
exception_100 = 错误 script_settings.include 未设置

# main.js
error_userscript_settings = 设置不能正确读取… \n
found_bad_encoding = 发现一个错误的字符，也许是因为编码错误， 请尝试使用其他编码

# options.html
usi_options = USI选项
description = 描述
deactivated_userscript = 已停用的脚本
add_new_userscript = 添加新的脚本 ！
load_userscript_by_url = 1. 通过链接加载新脚本
after_load = 加载
userscript_after_load = 加载脚本
load_userscript_by_url_label = 新脚本（通过链接）：
load_userscript_by_textarea = 2. 通过文本框加载脚本
load_example = 加载示例
clear_textarea = 清除文本框
save_userscript = 保存脚本
save = 保存
overwrite_without_warning = 无错误覆盖
clear = 清除
delete_all_userscripts = 删除全部脚本
all_userscripts = 全部脚本
create_new_userscript = 创建新脚本
revert_all = 重置全部
check_updates_for_all_userscripts = 检查更新（脚本）
check_now = 立刻检查
reset = 清除
start = 开始
alternativeCharset_default = 默认

# options_content.js
empty_userscript_url = 您必须指定可以创建脚本的链接，否则不能继续。

same_userscript_was_found_ask_update_it_1 = 找到相同设置的脚本（usi-id： “
same_userscript_was_found_ask_update_it_2 = ”） \n\
，您想要更新吗？

yes = 是
no = 否

not_set = --无设置--

want_to_delete_this_userscript_1 = 您要删除此脚本 (usi-id:：“
want_to_delete_this_userscript_2 = ”） 吗？

delete_x = 删除 (X)
change = 编辑
show_hide = 显示/隐藏
show = 显示
hide = 隐藏
activate_deactivate = 启用/停用
activated = 启用
deactivated = 停用

actual_used_quota = 实际使用内存（配额）
userscript_was_successful_deleted = 脚本已成功删除
userscript_could_not_deleted = 用户脚本无法删除

really_reset_all_settings = 您想要重置所有设置，真的吗？
really_really_reset_all_settings = 您绝对确定？这是最后的机会 ！

userscript_update_was_found_1 = 找到此脚本（usi-id： “
userscript_update_was_found_2 = ”）的更新\n您想更新吗？

# userscript-get.js
should_usi_import_this_userscript = USI应该加载并启用此脚本吗？

language = 语言
menu = 菜单

overview = 总览
overview_description = 这些选项目前已分离，\n\
如果领想查看脚本请转到“全部脚本

edit_userscript_with_id = 编辑此脚本，ID为
no_userscript_there = 您还没有任何脚本

external_script_is_now_loaded = 外部脚本已加载
userscript_was_saved = 此脚本已保存并启用。
userscript_couldnt_saved = 错误：此脚本未保存！
error_couldnt_load_url = 错误：无法加载此链接

export_all_userscripts = 导出所有脚本
export_all_now = -现在导出-
complete_export = 完整的导出？

hightlightjsstyle = hightlight.js默认样式

options_activate_highlightjs_title = HighlightJS启用

options_always_activate_greasemonkey_title = Greasemonkey函数永远启用
options_always_activate_greasemonkey_description = 如果Greasemonkey函数永远启用，您的脚本使用GM_getValue()之类的函数无需添加"// @use-greasemonkey true "

reload_from_source = 从下载源重新加载
add_new_custom_charset = 添加新的自定义字符集
charset_already_exist = 字符集已存在

alternative_charset_description = 如果是文件编码有问题，您可以在这里重新指定一个编码
alternative_charset = 选择字符集
direct_userscript_upload = 直接上传脚本

OldUsiIncludeBehavior_title = USI Include行为
OldUsiIncludeBehavior_description = 您可以改变include规则的处理，使用USI旧行为, 否则应该使用Greasemonkey行为。

OldUsiIncludeBehavior_oldUsiMethod = 旧版USI行为
OldUsiIncludeBehavior_GMMethod = Greasemonkey行为

changelog = 更新日志
changelog_1 = USI version 0.3.2-a-alpha and above are using the methods from Greasemonkey to process the "Include rules", \n\
if you encounter any problems and your Userscripts won't load/work anymore, \n\
then you can change this behavior to the previous one in the options.
changelog_2 = Since USI version 0.4.1-a-alpha and above, new userscripts will be active after the tab was reloaded (if the include rule will match this tab)

userscript_was_modified_by_usi___reason_missing_name = 您的脚本已被USI修改， 它增加了@name <Filename>！

show_GMValues = 显示保存的GM值
GMValues = GM值
confirm_delete_all_GMValues = 删除此脚本定义的全部GM值，您确定？

override_run_at = 覆盖@run-at设置
userscript_fixes = 修复脚本

help = 帮助/常见问题
help_1_title = Why doesn't the Userscript work, which was written for Greasemonkey?
help_1_description = In many cases, the Userscript won't run directly in USI, bacause USI and GM are handling the @run-at statement slightly different \n\
often it is enough to switch this, that means if the GM Userscript has "@run-at document-start" defined, then you have to switch it to "@run-at document-ready" for USI
help_2_title = Why did I not have access to the "document"?
help_2_description = Like in the other case, the reason is the "@run-at" statement, \n\
if it is defined as "document-start", there is no complete "document" at the time your Userscript runs, this will be available with "document-ready". \n\
For futher informations take a look at this page \n\
"page-mod" (https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/page-mod) in the chapter "contentScriptWhen"

config_add_css = 个人CSS
config_add_css_title = 个人CSS
config_add_css_description = 您可以在这里输入自己的CSS来更改USI的配置界面
config_add_css_refresh =刷新

edit_last_changes = 脚本上次修改